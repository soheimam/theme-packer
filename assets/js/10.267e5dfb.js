(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{357:function(e,t,a){"use strict";a.r(t);var n=a(40),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guide"}},[e._v("#")]),e._v(" Guide")]),e._v(" "),a("h2",{attrs:{id:"environments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#environments"}},[e._v("#")]),e._v(" Environments")]),e._v(" "),a("h3",{attrs:{id:"managing-multiple-environments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managing-multiple-environments"}},[e._v("#")]),e._v(" Managing Multiple Environments")]),e._v(" "),a("p",[e._v("By default, Theme Packer will use the "),a("code",[e._v(".env")]),e._v(" file in your project root and pass any keys prefixed with "),a("code",[e._v("SHOPIFY_")]),e._v(" to "),a("a",{attrs:{href:"https://github.com/Shopify/node-themekit",target:"_blank",rel:"noopener noreferrer"}},[e._v("@shopify/themekit"),a("OutboundLink")],1),e._v(". You can however pass an "),a("code",[e._v("--env=[env]")]),e._v(" flag to the cli, which will then use environment variables from an associated "),a("code",[e._v(".env.[env]")]),e._v(" file. For example:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("theme-packer deploy --env"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"dev"')]),e._v("\n")])])]),a("p",[e._v("will use the environment variables defined in your "),a("code",[e._v(".env.dev")]),e._v(" file.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("You can deploy to multiple environments at once by passing multiple "),a("code",[e._v("--env")]),e._v(" flags to the "),a("code",[e._v("deploy")]),e._v(" command. For example:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("theme-packer deploy --env"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"uk"')]),e._v(" --env"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"us"')]),e._v(" --env"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"eu"')]),e._v("\n")])])]),a("p",[e._v("This will skip run one initial build before deploying to each environment.")])]),e._v(" "),a("p",[e._v("It's common practice to keep multiple env files for various reasons. For example you might require "),a("code",[e._v("dev")]),e._v(", "),a("code",[e._v("staging")]),e._v(" and "),a("code",[e._v("production")]),e._v(" environments through your development lifecycle. Or, if you deploy to multiple stores in various regions you might keep region-specific environments, like "),a("code",[e._v("uk")]),e._v(", "),a("code",[e._v("us")]),e._v(" and "),a("code",[e._v("eu")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"using-config-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-config-yml"}},[e._v("#")]),e._v(" Using config.yml")]),e._v(" "),a("p",[e._v("If you prefer to manage your environments in a "),a("code",[e._v(".yml")]),e._v(" file much like how ThemeKit does, you can simply provide a "),a("code",[e._v("SHOPIFY_CONFIG")]),e._v(" key in your "),a("code",[e._v(".env")]),e._v(" file, for example:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("SHOPIFY_CONFIG")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("config.yml\n")])])]),a("p",[e._v("This tells Theme Packer to use "),a("code",[e._v("config.yml")]),e._v(" instead of an environment file. Please note however that when passing environment flags to match environments set up inside your config, you will need to use the "),a("code",[e._v("-e")]),e._v(" shorthand flag, instead of "),a("code",[e._v("--env")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"ignoring-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-files"}},[e._v("#")]),e._v(" Ignoring Files")]),e._v(" "),a("p",[e._v("Much like how you might have a "),a("code",[e._v(".gitignore")]),e._v(" in your repository to avoid committing your "),a("code",[e._v("node_modules")]),e._v(" directory, you may find that there are theme files you need to avoid uploading to Shopify. For example, it's common to ignore the "),a("code",[e._v("settings_data.json")]),e._v(" file to avoid overwriting all of the theme settings that have changed in the customiser.")]),e._v(" "),a("p",[e._v("ThemeKit provides two options for ignoring file updates: managing your ignore list per-environment, or managing your ignorelist in a separate file. You are fine to do either, using either "),a("code",[e._v("SHOPIFY_IGNORE_FILES")]),e._v(" in your "),a("code",[e._v(".env")]),e._v(" files to manage them on an environment level, or using "),a("code",[e._v("SHOPIFY_IGNORES")]),e._v(" in your "),a("code",[e._v(".env")]),e._v(" file to manage them in a separate folder. The standard boilerplate for a Theme Packer project uses an ignorefile by default, called "),a("code",[e._v(".themekitignore")]),e._v(", and this file is tracked in Git. The reason for this is that it's safer when working in teams to share an ignore file rather than manually keeping individual "),a("code",[e._v(".env")]),e._v(" files in sync.")]),e._v(" "),a("h2",{attrs:{id:"section-schemas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#section-schemas"}},[e._v("#")]),e._v(" Section Schemas")]),e._v(" "),a("p",[e._v("We often need schema options to be shared across multiple sections. We might for example need a predefined set of colours available to style some sections. Theme Packer allows you to write your section schemas separately as JavaScript modules and import them with a custom tag. To do so add a "),a("code",[e._v("schema")]),e._v(" tag in the following format: "),a("code",[e._v("{% schema '[import]' %}")]),e._v(", where "),a("code",[e._v("[import]")]),e._v(" is the name of the schema module in your "),a("code",[e._v("/src/schemas")]),e._v(" directory. You can read more about it here: "),a("a",{attrs:{href:"https://github.com/davidwarrington/liquid-schema-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("Liquid Schema Plugin"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Input: "),a("code",[e._v("section.js")])]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Section'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    settings"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//...")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    blocks"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//...")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("Input: "),a("code",[e._v("section.liquid")])]),e._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[e._v("{%- render 'section-component' -%}\n\n{% schema 'section' %}\n")])])]),a("p",[e._v("Output: "),a("code",[e._v("section.liquid")])]),e._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[e._v('{%- render \'section-component\' -%}\n\n{% schema %}\n{\n    "name": "Section",\n    "settings": [],\n    "blocks": []\n}\n{% endschema %}\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);